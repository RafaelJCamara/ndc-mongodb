/*
 *
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document:
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExistsExpression {
    #[serde(rename = "in_table")]
    pub in_table: Box<crate::ExistsInTable>,
    #[serde(rename = "type")]
    pub r#type: RHashType,
    #[serde(rename = "where")]
    pub r#where: Box<crate::Expression>,
}

impl ExistsExpression {
    pub fn new(
        in_table: crate::ExistsInTable,
        r#type: RHashType,
        r#where: crate::Expression,
    ) -> ExistsExpression {
        ExistsExpression {
            in_table: Box::new(in_table),
            r#type,
            r#where: Box::new(r#where),
        }
    }
}

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RHashType {
    #[serde(rename = "exists")]
    Exists,
}

impl Default for RHashType {
    fn default() -> RHashType {
        Self::Exists
    }
}
