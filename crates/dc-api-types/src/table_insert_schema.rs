/*
 *
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document:
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct TableInsertSchema {
    /// The fields that will be found in the insert row data for the table and the schema for each field
    #[serde(rename = "fields")]
    pub fields: ::std::collections::HashMap<String, crate::InsertFieldSchema>,
    /// The names of the columns that make up the table's primary key
    #[serde(
        rename = "primary_key",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub primary_key: Option<Option<Vec<String>>>,
    /// The fully qualified name of a table, where the last item in the array is the table name and any earlier items represent the namespacing of the table name
    #[serde(rename = "table")]
    pub table: Vec<String>,
}

impl TableInsertSchema {
    pub fn new(
        fields: ::std::collections::HashMap<String, crate::InsertFieldSchema>,
        table: Vec<String>,
    ) -> TableInsertSchema {
        TableInsertSchema {
            fields,
            primary_key: None,
            table,
        }
    }
}
