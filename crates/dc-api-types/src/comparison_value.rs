/*
 *
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document:
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
#[serde(tag = "type")]
pub enum ComparisonValue {
    #[serde(rename = "column")]
    AnotherColumnComparison {
        #[serde(rename = "column")]
        column: crate::ComparisonColumn,
    },
    #[serde(rename = "scalar")]
    ScalarValueComparison {
        #[serde(rename = "value")]
        value: serde_json::Value,
        #[serde(rename = "value_type")]
        value_type: String,
    },
    /// The `Variable` variant is not part of the v2 DC API - it is included to support queries
    /// translated from the v3 NDC API.
    #[serde(skip)]
    Variable { name: String },
}

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RHashType {
    #[serde(rename = "column")]
    Column,
}

impl Default for RHashType {
    fn default() -> RHashType {
        Self::Column
    }
}

#[cfg(test)]
mod test {
    use mongodb::bson::{bson, from_bson, to_bson};

    use crate::{comparison_column::ColumnSelector, ComparisonColumn};

    use super::ComparisonValue;

    #[test]
    fn serialize_scalar_value_comparison() -> Result<(), anyhow::Error> {
        let input = ComparisonValue::ScalarValueComparison {
            value: serde_json::json!("One"),
            value_type: "string".to_owned(),
        };
        assert_eq!(
            to_bson(&input)?,
            bson!({"value": "One", "value_type": "string", "type": "scalar"})
        );
        Ok(())
    }

    #[test]
    fn serialize_another_column_comparison() -> Result<(), anyhow::Error> {
        let input = ComparisonValue::AnotherColumnComparison {
            column: ComparisonColumn {
                column_type: "string".to_owned(),
                name: ColumnSelector::new("title".to_owned()),
                path: None,
            },
        };
        assert_eq!(
            to_bson(&input)?,
            bson!({"column": {"column_type": "string", "name": "title"}, "type": "column"})
        );
        Ok(())
    }

    #[test]
    fn parses_scalar_value_comparison() -> Result<(), anyhow::Error> {
        let input = bson!({"value": "One", "value_type": "string", "type": "scalar"});
        assert_eq!(
            from_bson::<ComparisonValue>(input)?,
            ComparisonValue::ScalarValueComparison {
                value: serde_json::json!("One"),
                value_type: "string".to_owned(),
            }
        );
        Ok(())
    }

    #[test]
    fn parses_another_column_comparison() -> Result<(), anyhow::Error> {
        let input = bson!({
	    "column": {"column_type": "string", "name": "title"},
	    "type": "column"});
        assert_eq!(
            from_bson::<ComparisonValue>(input)?,
            ComparisonValue::AnotherColumnComparison {
                column: ComparisonColumn {
                    column_type: "string".to_owned(),
                    name: ColumnSelector::new("title".to_owned()),
                    path: None,
                },
            }
        );
        Ok(())
    }
}
