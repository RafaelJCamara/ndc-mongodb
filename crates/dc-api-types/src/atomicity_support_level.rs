/*
 *
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document:
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

/// AtomicitySupportLevel : Describes the level of transactional atomicity the agent supports for mutation operations. 'row': If multiple rows are affected in a single operation but one fails, only the failed row's changes will be reverted 'single_operation': If multiple rows are affected in a single operation but one fails, all affected rows in the operation will be reverted 'homogeneous_operations': If multiple operations of only the same type exist in the one mutation request, a failure in one will result in all changes being reverted 'heterogeneous_operations': If multiple operations of any type exist in the one mutation request, a failure in one will result in all changes being reverted

/// Describes the level of transactional atomicity the agent supports for mutation operations. 'row': If multiple rows are affected in a single operation but one fails, only the failed row's changes will be reverted 'single_operation': If multiple rows are affected in a single operation but one fails, all affected rows in the operation will be reverted 'homogeneous_operations': If multiple operations of only the same type exist in the one mutation request, a failure in one will result in all changes being reverted 'heterogeneous_operations': If multiple operations of any type exist in the one mutation request, a failure in one will result in all changes being reverted
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AtomicitySupportLevel {
    #[serde(rename = "row")]
    Row,
    #[serde(rename = "single_operation")]
    SingleOperation,
    #[serde(rename = "homogeneous_operations")]
    HomogeneousOperations,
    #[serde(rename = "heterogeneous_operations")]
    HeterogeneousOperations,
}

impl ToString for AtomicitySupportLevel {
    fn to_string(&self) -> String {
        match self {
            Self::Row => String::from("row"),
            Self::SingleOperation => String::from("single_operation"),
            Self::HomogeneousOperations => String::from("homogeneous_operations"),
            Self::HeterogeneousOperations => String::from("heterogeneous_operations"),
        }
    }
}

impl Default for AtomicitySupportLevel {
    fn default() -> AtomicitySupportLevel {
        Self::Row
    }
}
