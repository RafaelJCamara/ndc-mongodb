/*
 *
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document:
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Capabilities {
    #[serde(rename = "comparisons", skip_serializing_if = "Option::is_none")]
    pub comparisons: Option<Box<crate::ComparisonCapabilities>>,
    #[serde(rename = "data_schema", skip_serializing_if = "Option::is_none")]
    pub data_schema: Option<Box<crate::DataSchemaCapabilities>>,
    #[serde(
        rename = "datasets",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub datasets: Option<Option<serde_json::Value>>,
    #[serde(
        rename = "explain",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub explain: Option<Option<serde_json::Value>>,
    #[serde(
        rename = "licensing",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub licensing: Option<Option<serde_json::Value>>,
    #[serde(
        rename = "metrics",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub metrics: Option<Option<serde_json::Value>>,
    #[serde(rename = "mutations", skip_serializing_if = "Option::is_none")]
    pub mutations: Option<Option<serde_json::Value>>,
    #[serde(rename = "post_schema", skip_serializing_if = "Option::is_none")]
    pub post_schema: Option<Option<serde_json::Value>>,
    #[serde(rename = "queries", skip_serializing_if = "Option::is_none")]
    pub queries: Option<Box<crate::QueryCapabilities>>,
    #[serde(
        rename = "raw",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub raw: Option<Option<serde_json::Value>>,
    #[serde(
        rename = "relationships",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub relationships: Option<Option<serde_json::Value>>,
    /// A map from scalar type names to their capabilities. Keys must be valid GraphQL names and must be defined as scalar types in the `graphql_schema`
    #[serde(rename = "scalar_types", skip_serializing_if = "Option::is_none")]
    pub scalar_types: Option<::std::collections::HashMap<String, crate::ScalarTypeCapabilities>>,
    #[serde(
        rename = "subscriptions",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub subscriptions: Option<Option<serde_json::Value>>,
}

impl Capabilities {
    pub fn new() -> Capabilities {
        Capabilities {
            comparisons: None,
            data_schema: None,
            datasets: None,
            explain: None,
            licensing: None,
            metrics: None,
            mutations: None,
            post_schema: None,
            queries: None,
            raw: None,
            relationships: None,
            scalar_types: None,
            subscriptions: None,
        }
    }
}
