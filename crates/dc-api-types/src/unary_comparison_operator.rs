/*
 *
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document:
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{de, Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Deserialize)]
#[serde(untagged)]
pub enum UnaryComparisonOperator {
    #[serde(deserialize_with = "parse_is_null")]
    IsNull,
    CustomUnaryComparisonOperator(String),
}

impl Serialize for UnaryComparisonOperator {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        match self {
            UnaryComparisonOperator::IsNull => serializer.serialize_str("is_null"),
            UnaryComparisonOperator::CustomUnaryComparisonOperator(s) => {
                serializer.serialize_str(s)
            }
        }
    }
}

fn parse_is_null<'de, D>(deserializer: D) -> Result<(), D::Error>
where
    D: de::Deserializer<'de>,
{
    let s = String::deserialize(deserializer)?;
    if s == "is_null" {
        Ok(())
    } else {
        Err(de::Error::custom("invalid value"))
    }
}

#[cfg(test)]
mod test {
    use mongodb::bson::{bson, from_bson, to_bson};

    use super::UnaryComparisonOperator;

    #[test]
    fn serialize_is_null() -> Result<(), anyhow::Error> {
        let input = UnaryComparisonOperator::IsNull;
        assert_eq!(to_bson(&input)?, bson!("is_null"));
        Ok(())
    }

    #[test]
    fn serialize_custom_unary_comparison_operator() -> Result<(), anyhow::Error> {
        let input = UnaryComparisonOperator::CustomUnaryComparisonOperator("square".to_owned());
        assert_eq!(to_bson(&input)?, bson!("square"));
        Ok(())
    }

    #[test]
    fn parses_is_null() -> Result<(), anyhow::Error> {
        let input = bson!("is_null");
        assert_eq!(
            from_bson::<UnaryComparisonOperator>(input)?,
            UnaryComparisonOperator::IsNull
        );
        Ok(())
    }

    #[test]
    fn parses_custom_operator() -> Result<(), anyhow::Error> {
        let input = bson!("square");
        assert_eq!(
            from_bson::<UnaryComparisonOperator>(input)?,
            UnaryComparisonOperator::CustomUnaryComparisonOperator("square".to_owned())
        );
        Ok(())
    }
}
