/*
 *
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document:
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct MutationRequest {
    /// The schema by which to interpret row data specified in any insert operations in this request
    #[serde(rename = "insert_schema")]
    pub insert_schema: Vec<crate::TableInsertSchema>,
    /// The mutation operations to perform
    #[serde(rename = "operations")]
    pub operations: Vec<crate::MutationOperation>,
    /// The relationships between tables involved in the entire mutation request
    #[serde(rename = "relationships", alias = "table_relationships")]
    pub relationships: Vec<crate::TableRelationships>,
}

impl MutationRequest {
    pub fn new(
        insert_schema: Vec<crate::TableInsertSchema>,
        operations: Vec<crate::MutationOperation>,
        relationships: Vec<crate::TableRelationships>,
    ) -> MutationRequest {
        MutationRequest {
            insert_schema,
            operations,
            relationships,
        }
    }
}
