/*
 *
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document:
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ColumnCountAggregate {
    /// The column to apply the count aggregate function to
    #[serde(rename = "column")]
    pub column: String,
    /// Whether or not only distinct items should be counted
    #[serde(rename = "distinct")]
    pub distinct: bool,
    #[serde(rename = "type")]
    pub r#type: RHashType,
}

impl ColumnCountAggregate {
    pub fn new(column: String, distinct: bool, r#type: RHashType) -> ColumnCountAggregate {
        ColumnCountAggregate {
            column,
            distinct,
            r#type,
        }
    }
}

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RHashType {
    #[serde(rename = "column_count")]
    ColumnCount,
}

impl Default for RHashType {
    fn default() -> RHashType {
        Self::ColumnCount
    }
}
