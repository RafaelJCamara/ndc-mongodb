/*
 *
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document:
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApplyUnaryComparisonOperator {
    #[serde(rename = "column")]
    pub column: crate::ComparisonColumn,
    #[serde(rename = "operator")]
    pub operator: crate::UnaryComparisonOperator,
    #[serde(rename = "type")]
    pub r#type: RHashType,
}

impl ApplyUnaryComparisonOperator {
    pub fn new(
        column: crate::ComparisonColumn,
        operator: crate::UnaryComparisonOperator,
        r#type: RHashType,
    ) -> ApplyUnaryComparisonOperator {
        ApplyUnaryComparisonOperator {
            column,
            operator,
            r#type,
        }
    }
}

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RHashType {
    #[serde(rename = "unary_op")]
    UnaryOp,
}

impl Default for RHashType {
    fn default() -> RHashType {
        Self::UnaryOp
    }
}

#[cfg(test)]
mod test {
    use mongodb::bson::{bson, from_bson};

    use crate::comparison_column::ColumnSelector;
    use crate::ComparisonColumn;
    use crate::UnaryComparisonOperator;

    use super::ApplyUnaryComparisonOperator;
    use super::RHashType;

    #[test]
    fn parses_rhash_type() -> Result<(), anyhow::Error> {
        let input = bson!("unary_op");
        assert_eq!(from_bson::<RHashType>(input)?, RHashType::UnaryOp);
        Ok(())
    }

    #[test]
    fn parses_apply_unary_comparison_operator() -> Result<(), anyhow::Error> {
        let input = bson!({"column": bson!({"column_type": "foo", "name": "_id"}), "operator": "is_null", "type": "unary_op"});
        assert_eq!(
            from_bson::<ApplyUnaryComparisonOperator>(input)?,
            ApplyUnaryComparisonOperator {
                column: ComparisonColumn {
                    column_type: "foo".to_owned(),
                    name: ColumnSelector::new("_id".to_owned()),
                    path: None
                },
                operator: UnaryComparisonOperator::IsNull,
                r#type: RHashType::UnaryOp
            }
        );
        Ok(())
    }
}
