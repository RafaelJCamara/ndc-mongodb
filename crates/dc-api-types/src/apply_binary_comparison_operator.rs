/*
 *
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document:
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApplyBinaryComparisonOperator {
    #[serde(rename = "column")]
    pub column: crate::ComparisonColumn,
    #[serde(rename = "operator")]
    pub operator: crate::BinaryComparisonOperator,
    #[serde(rename = "type")]
    pub r#type: RHashType,
    #[serde(rename = "value")]
    pub value: crate::ComparisonValue,
}

impl ApplyBinaryComparisonOperator {
    pub fn new(
        column: crate::ComparisonColumn,
        operator: crate::BinaryComparisonOperator,
        r#type: RHashType,
        value: crate::ComparisonValue,
    ) -> ApplyBinaryComparisonOperator {
        ApplyBinaryComparisonOperator {
            column,
            operator,
            r#type,
            value,
        }
    }
}

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RHashType {
    #[serde(rename = "binary_op")]
    BinaryOp,
}

impl Default for RHashType {
    fn default() -> RHashType {
        Self::BinaryOp
    }
}

#[cfg(test)]
mod test {
    use mongodb::bson::{bson, from_bson};

    use crate::comparison_column::ColumnSelector;
    use crate::BinaryComparisonOperator;
    use crate::ComparisonColumn;
    use crate::ComparisonValue;

    use super::ApplyBinaryComparisonOperator;
    use super::RHashType;

    #[test]
    fn parses_rhash_type() -> Result<(), anyhow::Error> {
        let input = bson!("binary_op");
        assert_eq!(from_bson::<RHashType>(input)?, RHashType::BinaryOp);
        Ok(())
    }

    #[test]
    fn parses_apply_binary_comparison_operator() -> Result<(), anyhow::Error> {
        let input = bson!({
            "type": "binary_op",
            "column": {"column_type": "string", "name": "title"},
            "operator": "equal",
            "value": {"type": "scalar", "value": "One", "value_type": "string"}
        });
        assert_eq!(
            from_bson::<ApplyBinaryComparisonOperator>(input)?,
            ApplyBinaryComparisonOperator {
                r#type: RHashType::BinaryOp,
                column: ComparisonColumn {
                    column_type: "string".to_owned(),
                    name: ColumnSelector::new("title".to_owned()),
                    path: None
                },
                operator: BinaryComparisonOperator::Equal,
                value: ComparisonValue::ScalarValueComparison {
                    value: serde_json::json!("One"),
                    value_type: "string".to_owned()
                }
            }
        );
        Ok(())
    }
}
