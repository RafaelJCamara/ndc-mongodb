/*
 *
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document:
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{de, Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Deserialize)]
#[serde(untagged)]
pub enum BinaryComparisonOperator {
    #[serde(deserialize_with = "parse_less_than")]
    LessThan,
    #[serde(deserialize_with = "parse_less_than_or_equal")]
    LessThanOrEqual,
    #[serde(deserialize_with = "parse_greater_than")]
    GreaterThan,
    #[serde(deserialize_with = "parse_greater_than_or_equal")]
    GreaterThanOrEqual,
    #[serde(deserialize_with = "parse_equal")]
    Equal,
    CustomBinaryComparisonOperator(String),
}

impl Serialize for BinaryComparisonOperator {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        match self {
            BinaryComparisonOperator::LessThan => serializer.serialize_str("less_than"),
            BinaryComparisonOperator::LessThanOrEqual => {
                serializer.serialize_str("less_than_or_equal")
            }
            BinaryComparisonOperator::GreaterThan => serializer.serialize_str("greater_than"),
            BinaryComparisonOperator::GreaterThanOrEqual => {
                serializer.serialize_str("greater_than_or_equal")
            }
            BinaryComparisonOperator::Equal => serializer.serialize_str("equal"),
            BinaryComparisonOperator::CustomBinaryComparisonOperator(s) => {
                serializer.serialize_str(s)
            }
        }
    }
}

fn parse_less_than<'de, D>(deserializer: D) -> Result<(), D::Error>
where
    D: de::Deserializer<'de>,
{
    let s = String::deserialize(deserializer)?;
    string_p::<'de, D>(s, "less_than".to_owned())
}

fn parse_less_than_or_equal<'de, D>(deserializer: D) -> Result<(), D::Error>
where
    D: de::Deserializer<'de>,
{
    let s = String::deserialize(deserializer)?;
    string_p::<'de, D>(s, "less_than_or_equal".to_owned())
}

fn parse_greater_than<'de, D>(deserializer: D) -> Result<(), D::Error>
where
    D: de::Deserializer<'de>,
{
    let s = String::deserialize(deserializer)?;
    string_p::<'de, D>(s, "greater_than".to_owned())
}

fn parse_greater_than_or_equal<'de, D>(deserializer: D) -> Result<(), D::Error>
where
    D: de::Deserializer<'de>,
{
    let s = String::deserialize(deserializer)?;
    string_p::<'de, D>(s, "greater_than_or_equal".to_owned())
}

fn parse_equal<'de, D>(deserializer: D) -> Result<(), D::Error>
where
    D: de::Deserializer<'de>,
{
    let s = String::deserialize(deserializer)?;
    string_p::<'de, D>(s, "equal".to_owned())
}

fn string_p<'de, D>(expected: String, input: String) -> Result<(), D::Error>
where
    D: de::Deserializer<'de>,
{
    if input == expected {
        Ok(())
    } else {
        Err(de::Error::custom("invalid value"))
    }
}

#[cfg(test)]
mod test {
    use mongodb::bson::{bson, from_bson, to_bson};

    use super::BinaryComparisonOperator;

    #[test]
    fn serialize_less_than() -> Result<(), anyhow::Error> {
        let input = BinaryComparisonOperator::LessThan;
        assert_eq!(to_bson(&input)?, bson!("less_than"));
        Ok(())
    }

    #[test]
    fn serialize_less_than_or_equal() -> Result<(), anyhow::Error> {
        let input = BinaryComparisonOperator::LessThanOrEqual;
        assert_eq!(to_bson(&input)?, bson!("less_than_or_equal"));
        Ok(())
    }

    #[test]
    fn serialize_greater_than() -> Result<(), anyhow::Error> {
        let input = BinaryComparisonOperator::GreaterThan;
        assert_eq!(to_bson(&input)?, bson!("greater_than"));
        Ok(())
    }

    #[test]
    fn serialize_greater_than_or_equal() -> Result<(), anyhow::Error> {
        let input = BinaryComparisonOperator::GreaterThanOrEqual;
        assert_eq!(to_bson(&input)?, bson!("greater_than_or_equal"));
        Ok(())
    }

    #[test]
    fn serialize_equal() -> Result<(), anyhow::Error> {
        let input = BinaryComparisonOperator::Equal;
        assert_eq!(to_bson(&input)?, bson!("equal"));
        Ok(())
    }

    #[test]
    fn serialize_custom_binary_comparison_operator() -> Result<(), anyhow::Error> {
        let input = BinaryComparisonOperator::CustomBinaryComparisonOperator("tensor".to_owned());
        assert_eq!(to_bson(&input)?, bson!("tensor"));
        Ok(())
    }

    #[test]
    fn parses_less_than() -> Result<(), anyhow::Error> {
        let input = bson!("less_than");
        assert_eq!(
            from_bson::<BinaryComparisonOperator>(input)?,
            BinaryComparisonOperator::LessThan
        );
        Ok(())
    }

    #[test]
    fn parses_less_than_or_equal() -> Result<(), anyhow::Error> {
        let input = bson!("less_than_or_equal");
        assert_eq!(
            from_bson::<BinaryComparisonOperator>(input)?,
            BinaryComparisonOperator::LessThanOrEqual
        );
        Ok(())
    }

    #[test]
    fn parses_greater_than() -> Result<(), anyhow::Error> {
        let input = bson!("greater_than");
        assert_eq!(
            from_bson::<BinaryComparisonOperator>(input)?,
            BinaryComparisonOperator::GreaterThan
        );
        Ok(())
    }

    #[test]
    fn parses_greater_than_or_equal() -> Result<(), anyhow::Error> {
        let input = bson!("greater_than_or_equal");
        assert_eq!(
            from_bson::<BinaryComparisonOperator>(input)?,
            BinaryComparisonOperator::GreaterThanOrEqual
        );
        Ok(())
    }

    #[test]
    fn parses_equal() -> Result<(), anyhow::Error> {
        let input = bson!("equal");
        assert_eq!(
            from_bson::<BinaryComparisonOperator>(input)?,
            BinaryComparisonOperator::Equal
        );
        Ok(())
    }

    #[test]
    fn parses_custom_operator() -> Result<(), anyhow::Error> {
        let input = bson!("tensor");
        assert_eq!(
            from_bson::<BinaryComparisonOperator>(input)?,
            BinaryComparisonOperator::CustomBinaryComparisonOperator("tensor".to_owned())
        );
        Ok(())
    }
}
