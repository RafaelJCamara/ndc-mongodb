/*
 *
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document:
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{de, Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Deserialize)]
#[serde(untagged)]
pub enum BinaryArrayComparisonOperator {
    #[serde(deserialize_with = "parse_in")]
    In,
    CustomBinaryComparisonOperator(String),
}

impl Serialize for BinaryArrayComparisonOperator {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        match self {
            BinaryArrayComparisonOperator::In => serializer.serialize_str("in"),
            BinaryArrayComparisonOperator::CustomBinaryComparisonOperator(s) => {
                serializer.serialize_str(s)
            }
        }
    }
}

fn parse_in<'de, D>(deserializer: D) -> Result<(), D::Error>
where
    D: de::Deserializer<'de>,
{
    let s = String::deserialize(deserializer)?;
    if s == "in" {
        Ok(())
    } else {
        Err(de::Error::custom("invalid value"))
    }
}

#[cfg(test)]
mod test {
    use mongodb::bson::{bson, from_bson, to_bson};

    use super::BinaryArrayComparisonOperator;

    #[test]
    fn serialize_is_null() -> Result<(), anyhow::Error> {
        let input = BinaryArrayComparisonOperator::In;
        assert_eq!(to_bson(&input)?, bson!("in"));
        Ok(())
    }

    #[test]
    fn serialize_custom_unary_comparison_operator() -> Result<(), anyhow::Error> {
        let input =
            BinaryArrayComparisonOperator::CustomBinaryComparisonOperator("tensor".to_owned());
        assert_eq!(to_bson(&input)?, bson!("tensor"));
        Ok(())
    }

    #[test]
    fn parses_in() -> Result<(), anyhow::Error> {
        let input = bson!("in");
        assert_eq!(
            from_bson::<BinaryArrayComparisonOperator>(input)?,
            BinaryArrayComparisonOperator::In
        );
        Ok(())
    }

    #[test]
    fn parses_custom_operator() -> Result<(), anyhow::Error> {
        let input = bson!("sum");
        assert_eq!(
            from_bson::<BinaryArrayComparisonOperator>(input)?,
            BinaryArrayComparisonOperator::CustomBinaryComparisonOperator("sum".to_owned())
        );
        Ok(())
    }
}
