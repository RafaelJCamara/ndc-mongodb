/*
 *
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document:
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DeleteMutationOperation {
    /// The fields to return for the rows affected by this delete operation
    #[serde(
        rename = "returning_fields",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub returning_fields: Option<Option<::std::collections::HashMap<String, crate::Field>>>,
    /// The fully qualified name of a table, where the last item in the array is the table name and any earlier items represent the namespacing of the table name
    #[serde(rename = "table")]
    pub table: Vec<String>,
    #[serde(rename = "type")]
    pub r#type: RHashType,
    #[serde(rename = "where", skip_serializing_if = "Option::is_none")]
    pub r#where: Option<Box<crate::Expression>>,
}

impl DeleteMutationOperation {
    pub fn new(table: Vec<String>, r#type: RHashType) -> DeleteMutationOperation {
        DeleteMutationOperation {
            returning_fields: None,
            table,
            r#type,
            r#where: None,
        }
    }
}

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RHashType {
    #[serde(rename = "delete")]
    Delete,
}

impl Default for RHashType {
    fn default() -> RHashType {
        Self::Delete
    }
}
