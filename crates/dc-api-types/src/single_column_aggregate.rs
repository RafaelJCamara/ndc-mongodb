/*
 *
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document:
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct SingleColumnAggregate {
    /// The column to apply the aggregation function to
    #[serde(rename = "column")]
    pub column: String,
    /// Single column aggregate function name. A valid GraphQL name
    #[serde(rename = "function")]
    pub function: String,
    #[serde(rename = "result_type")]
    pub result_type: String,
    #[serde(rename = "type")]
    pub r#type: RHashType,
}

impl SingleColumnAggregate {
    pub fn new(
        column: String,
        function: String,
        result_type: String,
        r#type: RHashType,
    ) -> SingleColumnAggregate {
        SingleColumnAggregate {
            column,
            function,
            result_type,
            r#type,
        }
    }
}

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RHashType {
    #[serde(rename = "single_column")]
    SingleColumn,
}

impl Default for RHashType {
    fn default() -> RHashType {
        Self::SingleColumn
    }
}
