/*
 *
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document:
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ScalarValue {
    #[serde(rename = "value")]
    pub value: serde_json::Value,
    #[serde(rename = "value_type")]
    pub value_type: String,
}

impl ScalarValue {
    pub fn new(value: serde_json::Value, value_type: String) -> ScalarValue {
        ScalarValue { value, value_type }
    }
}

#[cfg(test)]
mod test {
    use mongodb::bson::{bson, from_bson, to_bson};

    use super::ScalarValue;

    #[test]
    fn serialize_scalar_value() -> Result<(), anyhow::Error> {
        let input = ScalarValue {
            value: serde_json::json!("One"),
            value_type: "string".to_owned(),
        };
        assert_eq!(
            to_bson(&input)?,
            bson!({"value": "One", "value_type": "string"})
        );
        Ok(())
    }

    #[test]
    fn parses_scalar_value() -> Result<(), anyhow::Error> {
        let input = bson!({"value": "One", "value_type": "string"});
        assert_eq!(
            from_bson::<ScalarValue>(input)?,
            ScalarValue {
                value: serde_json::json!("One"),
                value_type: "string".to_owned(),
            }
        );
        Ok(())
    }
}
